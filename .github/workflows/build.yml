name: üèóÔ∏èÔ∏è Build and Check for Changes
on:
  # This workflow uses the pull_request trigger which prevents write permissions and secrets
  # access to the target repository from public forks.  This should remain as a pull_request
  # trigger because checkout, build, format and checking for changes do not need elevated
  # permissions to the repository.  The reduced permissions for public forks is adequate.
  # Since this will commit readme/recompile changes back to the branch, special attention
  # should be paid to changes made to this workflow when reviewing the PR and granting
  # permission to first time contributors to run the workflow.
  pull_request:
  # Don't include any specific paths here so we always get a build that produces a status
  # check that our Branch Protection Rules can use.  Having a status check also allows us
  # to require that branches be up to date before they are merged.

concurrency:
  # https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: npm ci üöÄ
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      # If this step results in changes, they will be committed in the last step
      - name: Recompile and Format action
        run: npm run all

      - name: Check for code changes to the action
        id: action-code
        uses: im-open/did-custom-action-code-change@v1.0.1
        with:
          files-with-code: action.yml,package.json,package-lock.json
          folders-with-code: src,dist
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the next version for the readme if there are code changes to the action
        if: steps.action-code.outputs.HAS_CHANGES == 'true'
        id: version
        uses: im-open/git-version-lite@v2.2.0
        with:
          create-ref: false
          default-release-type: major

      - name: Comment on PR with release version ${{ steps.version.outputs.NEXT_VERSION }}
        uses: im-open/update-pr-comment@v1.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-identifier: next-version
          comment-content: |
            Next Version: ${{ env.NEXT_VERSION || 'will not increment' }}

      - name: Update readme with next version if there are code changes to the action
        if: steps.action-code.outputs.HAS_CHANGES == 'true'
        uses: im-open/update-action-version-in-file@v1.0.0
        with:
          file-to-update: './README.md'
          action-name: ${{ github.repository }}
          updated-version: ${{ steps.version.outputs.NEXT_MAJOR_VERSION }}

      - name: Commit unstaged readme/recompile changes if there are code changes to the action
        id: commit-changes
        if: steps.action-code.outputs.HAS_CHANGES == 'true'
        run: |
          if [[ "$(git status --porcelain)" != "" ]]; then
            echo "There are changes to commit"
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "Update readme with latest version and/or recompile the action."
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "There were no changes to commit"
          fi

      - name: Upload dist folder as artifact on commit failure
        if: failure() && steps.commit-changes.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist
